問題1
puts hash.keys
puts hash.values
上記のメソッドを実行した時に

one
two
three
1
2
3
とターミナルに表示されるような変数hashを作成するためのコードをシンボルを使って記述してください。

----------------------------------------------------------------------------------

hash = { one:1, two:2, three:3 }


問題2
配列の内部に、複数のユーザーの情報をハッシュとして持つ変数user_dataがあります。
user_data = [
 {user: {profile: {name: 'George'}}},
 {user: {profile: {name: 'Alice'}}},
 {user: {profile: {name: 'Taro'}}},
]
user_dataを利用して、全てのユーザーの名前だけが出力されるようにRubyでコーディングしてください。
ただし、出力結果は次のようになるものとします。

George
Alice
Taro

------------------------------------------------------------------------------------

user_data.each do |u|
    puts u[:user][:profile][:name]
end

別解

user_data.each{ |u| puts u.dig(:user, :profile, :name) }


問題3
class Article

  def initialize(author, title, content)
    @author = author
    @title = title
    @content = content
  end

end
上記のコードに追加を行い、以下の出力結果を得られるようにしてください。ただし、クラスとインスタンスを使用するものとします。

著者: 阿部
タイトル: Rubyの素晴らしさについて
本文: Awesome Ruby!


------------------------------------------------------------------------------------------------------------
class Article

  def initialize(author, title, content)
    @author = author
    @title = title
    @content = content
  end

  def author
    @author
  end

  def title
    @title
  end

  def content
    @content
  end

end

article = Article.new("阿部", "Rubyの素晴らしさについて", "Awesome Ruby!")
puts "著者: #{article.author}"
puts "タイトル: #{article.title}"
puts "本文: #{article.content}"

問題4
今日の曜日を表示するコードをDateクラスを使用して記述してください。

ただし、金曜日だった場合だけ以下のように表示の内容を変えてください。

（出力内容）
「今日は月曜日」
「今日は金曜日だ ！！！」

ヒント
 Dateクラス
DateクラスとはRubyの標準ライブラリの機能です。Dateクラスを使うには以下一文を記述します。


require "date"
次に、Dateクラスを用いて「今日の曜日」を取得する場合は以下のように記述します。

Date.today.wday
wdayは曜日を0(日曜日)から6(土曜日)の整数で取得することができるDateクラスに用意されているメソッドです。

たとえば、以下のように使うことができます。

require "date"

day = Date.today.wday

puts day
これを実行すると、曜日に合わせた数字が出力されます。たとえば、木曜日だとすれば4が出力されることになります。

---------------------------------------------------------------------------------------------------

day = Date.today.wday
days = ["日曜日", "月曜日", "火曜日", "水曜日", "木曜日", "金曜日", "土曜日"]

if day == 5
  puts "今日は#{days[day]}だ！！！"
else
  puts "今日は#{days[day]}"
end

問題5
次のif文をunlessというメソッドを用いて書き換えてください。


if a + b > 0
  puts "計算結果は0より大きいです"
end
ヒント
unless
unlessとはifとは逆で、条件式がfalseの場合に処理が実行されます。
unlessの詳細は公式リファレンスを確認しましょう。

ifを使用した場合
if 条件式
  条件式がtrueの時に実行する処理
else
  条件式がfalseの時に実行する処理
end
unlessを使用した場合
unless 条件式
  条件式がfalseの時に実行する処理
else
  条件式がtrueの時に実行する処理
end

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

unless a + b <= 0
  puts "計算結果は0より大きいです"
end


問題6
次の要件を満たすプログラムを実装しましょう。

1~10の数値を順番に足し合わせる
足し算の合計値がターミナルに出力される
しかし、以下のような順番に並べて、足し算しただけのプログラムはNGです。

sum = 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10
ループ処理を用いて実装しましょう。

ヒント
times文を用いることで、ループ処理を実装できます。
ループ処理とは、特定の条件下にて、任意の処理を繰り返すことでした。
今回の問題にループ処理を当てはめると、

0に1を足し、
その結果に2を足し、
その結果に3を足し、
その結果に4を足し、
その結果に5を足し、
...と10まで繰り返していきます。

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
sum = 0

10.times do |i|
  sum = sum + i + 1
end

puts sum


別解
sum = 0

10.times do |i|
  sum += i + 1
end

puts sum


問題7
以下の配列から任意の数字を探して何番目に含まれているかという結果を返すsearchメソッドを、each_with_indexを用いて作成しましょう。


input = [3, 5, 9 ,12, 15, 21, 29, 35, 42, 51, 62, 78, 81, 87, 92, 93]
雛形
以下の雛形のコードを参考に解答しましょう。


def search(target_num, input)
  # 処理を記述
end

input = [3, 5, 9 ,12, 15, 21, 29, 35, 42, 51, 62, 78, 81, 87, 92, 93]
# 呼び出し例
search(11, input)
出力例
search(5, input) → 2番目にあります
search(12, input) → 4番目にあります
search(7, input) → その数は含まれていません

ヒント
 each_with_index
each_with_indexは、Rubyに標準で組み込まれているメソッドの1つです。要素の繰り返し処理と同時に、その要素が何番目に処理されたのかも表すことができます。

以下のように書きます。


配列名.each_with_index  do |item, i|

end
具体的には以下のように使うことができます。


fruits = ["メロン", "バナナ", "アップル"]

fruits.each_with_index do |item, i|
 puts "#{i}番目のフルーツは、#{item}です。"
end
これを実行すると、以下のような出力結果が得られます。


0番目のフルーツは、メロンです。
1番目のフルーツは、バナナです。
2番目のフルーツは、アップルです。

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

def search(target_num, input)

  input.each_with_index do |num, index|
    if num == target_num
      puts "#{index + 1}番目にあります"
      return
    end
  end
  puts "その数は含まれていません"
end

input = [3, 5, 9 ,12, 15, 21, 29, 35, 42, 51, 62, 78, 81, 87, 92, 93]
search(11, input)
